{
  "documents": [
    {
      "id": "10d00c65fcf0e423b3485ba021a208d78598e908",
      "url": "file:///Users/kreshujan/Desktop/SAA/Distributed-Search-Engine/testdata/pages/ranking-ml.html",
      "title": "Machine Learning Ranking",
      "tokens": [
        "machine",
        "learning",
        "ranking",
        "machine",
        "learning",
        "ranking",
        "learning",
        "to",
        "rank",
        "models",
        "optimize",
        "search",
        "relevance",
        "by",
        "combining",
        "lexical",
        "signals",
        "with",
        "semantic",
        "embeddings",
        "features",
        "like",
        "click",
        "through",
        "rate",
        "dwell",
        "time",
        "and",
        "query",
        "intent",
        "vectors",
        "power",
        "ranking",
        "improvements",
        "pairwise",
        "ranking",
        "losses",
        "and",
        "gradient",
        "boosted",
        "decision",
        "trees",
        "are",
        "common",
        "baselines",
        "before",
        "deploying",
        "transformer",
        "based",
        "rerankers",
        "vector",
        "search"
      ],
      "content": "Machine Learning Ranking Machine Learning Ranking Learning to rank models optimize search relevance by combining lexical signals with semantic embeddings. Features like click-through-rate, dwell time, and query intent vectors power ranking improvements. Pairwise ranking losses and gradient boosted decision trees are common baselines before deploying transformer-based rerankers. Vector Search "
    },
    {
      "id": "1fe8dbf1bce603b2fdd4e7a5266cd197cc4b4d91",
      "url": "file:///Users/kreshujan/Desktop/SAA/Distributed-Search-Engine/testdata/pages/vector-search.html",
      "title": "Vector Search",
      "tokens": [
        "vector",
        "search",
        "vector",
        "search",
        "approximate",
        "nearest",
        "neighbor",
        "indices",
        "like",
        "hnsw",
        "accelerate",
        "similarity",
        "search",
        "across",
        "embeddings",
        "created",
        "by",
        "deep",
        "learning",
        "models",
        "hybrid",
        "retrieval",
        "blends",
        "keyword",
        "inverted",
        "indices",
        "with",
        "ann",
        "structures",
        "to",
        "capture",
        "both",
        "lexical",
        "and",
        "semantic",
        "relevance",
        "ranking",
        "ensembles",
        "make",
        "the",
        "final",
        "decision",
        "resilient",
        "search",
        "services"
      ],
      "content": "Vector Search Vector Search Approximate nearest neighbor indices like HNSW accelerate similarity search across embeddings created by deep learning models. Hybrid retrieval blends keyword inverted indices with ANN structures to capture both lexical and semantic relevance. Ranking ensembles make the final decision. Resilient Search Services "
    },
    {
      "id": "587815ea412ca96d6d0eb241d8eaee88c45591ab",
      "url": "file:///Users/kreshujan/Desktop/SAA/Distributed-Search-Engine/testdata/pages/distributed-systems.html",
      "title": "Distributed Systems Fundamentals",
      "tokens": [
        "distributed",
        "systems",
        "fundamentals",
        "distributed",
        "systems",
        "fundamentals",
        "distributed",
        "systems",
        "coordinate",
        "multiple",
        "nodes",
        "to",
        "accomplish",
        "a",
        "shared",
        "objective",
        "consistency",
        "availability",
        "and",
        "partition",
        "tolerance",
        "form",
        "the",
        "cap",
        "theorem",
        "choices",
        "engineers",
        "must",
        "balance",
        "key",
        "building",
        "blocks",
        "include",
        "consensus",
        "protocols",
        "such",
        "as",
        "raft",
        "anti",
        "entropy",
        "gossip",
        "and",
        "reliable",
        "messaging",
        "via",
        "durable",
        "queues",
        "resilient",
        "search",
        "services",
        "machine",
        "learning",
        "ranking"
      ],
      "content": "Distributed Systems Fundamentals Distributed Systems Fundamentals Distributed systems coordinate multiple nodes to accomplish a shared objective. Consistency, availability, and partition tolerance form the CAP theorem choices engineers must balance. Key building blocks include consensus protocols such as Raft, anti-entropy gossip, and reliable messaging via durable queues. Resilient Search Services Machine Learning Ranking "
    },
    {
      "id": "79c56c2bb2762ef879037eed4db000f2926f9112",
      "url": "file:///Users/kreshujan/Desktop/SAA/Distributed-Search-Engine/testdata/pages/resilient-search.html",
      "title": "Resilient Search Services",
      "tokens": [
        "resilient",
        "search",
        "services",
        "resilient",
        "search",
        "services",
        "highly",
        "available",
        "search",
        "services",
        "rely",
        "on",
        "multi",
        "region",
        "replication",
        "circuit",
        "breakers",
        "and",
        "tail",
        "latency",
        "mitigation",
        "strategies",
        "engineers",
        "invest",
        "in",
        "observability",
        "and",
        "chaos",
        "engineering",
        "to",
        "validate",
        "resilience",
        "edge",
        "caching",
        "and",
        "query",
        "result",
        "reuse",
        "deliver",
        "sub",
        "50",
        "millisecond",
        "responses",
        "for",
        "popular",
        "terms",
        "while",
        "background",
        "reindex",
        "jobs",
        "keep",
        "freshness",
        "high",
        "distributed",
        "systems",
        "fundamentals",
        "machine",
        "learning",
        "ranking"
      ],
      "content": "Resilient Search Services Resilient Search Services Highly available search services rely on multi-region replication, circuit breakers, and tail-latency mitigation strategies. Engineers invest in observability and chaos engineering to validate resilience. Edge caching and query result reuse deliver sub 50 millisecond responses for popular terms, while background reindex jobs keep freshness high. Distributed Systems Fundamentals Machine Learning Ranking "
    }
  ]
}
